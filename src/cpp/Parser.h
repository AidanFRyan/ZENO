/// ================================================================
/// 
/// Disclaimer:  IMPORTANT:  This software was developed at the
/// National Institute of Standards and Technology by employees of the
/// Federal Government in the course of their official duties.
/// Pursuant to title 17 Section 105 of the United States Code this
/// software is not subject to copyright protection and is in the
/// public domain.  This is an experimental system.  NIST assumes no
/// responsibility whatsoever for its use by other parties, and makes
/// no guarantees, expressed or implied, about its quality,
/// reliability, or any other characteristic.  We would appreciate
/// acknowledgement if the software is used.  This software can be
/// redistributed and/or modified freely provided that any derivative
/// works bear some notice that they are derived from it, and any
/// modified versions bear some notice that they have been modified.
/// 
/// ================================================================

// ================================================================
// 
// Authors: Derek Juba <derek.juba@nist.gov>
// Date:    Wed Feb 19 11:59:38 2014 EDT
//
// Time-stamp: <2016-09-22 13:10:16 dcj>
//
// ================================================================

// Generated by Bisonc++ V4.04.01 on Wed, 19 Feb 2014 11:59:38 -0500

#ifndef Parser_h_included
#define Parser_h_included

#include <vector>
#include <string>

#include "Parameters.h"
#include "Geometry/Spheres.h"

// $insert baseclass
#include "Parserbase.h"
// $insert scanner.h
#include "Scanner.h"

// ================================================================

#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;

    Parameters * parameters;
    Spheres<double> * spheres;

    public:
        Parser(std::istream &in,
	       Parameters * parameters, 
	       Spheres<double> * spheres);

        int parse();

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

	void addSphere(double x, double y, double z, double r);
	void setST(double skinThickness);
	void setRLAUNCH(double launchRadius);
	void setHUNITS(double number, std::string unitString);
	void setUNITS(std::string unitString);
	void setTEMP(double number, std::string unitString);
	void setMASS(double number, std::string unitString);
	void setVISCOSITY(double number, std::string unitString);
	void setBF(double buoyancyFactor);

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
};


#endif

// ================================================================

// Local Variables:
// time-stamp-line-limit: 30
// End:
